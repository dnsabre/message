// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: tech/storezhang/dnsabre/message/rule.proto

package message

import (
	context "context"
	rule "github.com/dnsabre/core/rule"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Rule_Add_FullMethodName    = "/tech.storezhang.dnsabre.message.Rule/Add"
	Rule_Get_FullMethodName    = "/tech.storezhang.dnsabre.message.Rule/Get"
	Rule_Paging_FullMethodName = "/tech.storezhang.dnsabre.message.Rule/Paging"
	Rule_Update_FullMethodName = "/tech.storezhang.dnsabre.message.Rule/Update"
	Rule_Delete_FullMethodName = "/tech.storezhang.dnsabre.message.Rule/Delete"
)

// RuleClient is the client API for Rule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleClient interface {
	// 创建
	Add(ctx context.Context, in *rule.AddReq, opts ...grpc.CallOption) (*rule.AddRsp, error)
	// 获取
	Get(ctx context.Context, in *rule.GetReq, opts ...grpc.CallOption) (*rule.GetRsp, error)
	// 分页
	Paging(ctx context.Context, in *rule.PagingReq, opts ...grpc.CallOption) (*rule.PagingRsp, error)
	// 修改
	Update(ctx context.Context, in *rule.UpdateReq, opts ...grpc.CallOption) (*rule.UpdateRsp, error)
	// 删除
	Delete(ctx context.Context, in *rule.DeleteReq, opts ...grpc.CallOption) (*rule.DeleteRsp, error)
}

type ruleClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleClient(cc grpc.ClientConnInterface) RuleClient {
	return &ruleClient{cc}
}

func (c *ruleClient) Add(ctx context.Context, in *rule.AddReq, opts ...grpc.CallOption) (*rule.AddRsp, error) {
	out := new(rule.AddRsp)
	err := c.cc.Invoke(ctx, Rule_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) Get(ctx context.Context, in *rule.GetReq, opts ...grpc.CallOption) (*rule.GetRsp, error) {
	out := new(rule.GetRsp)
	err := c.cc.Invoke(ctx, Rule_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) Paging(ctx context.Context, in *rule.PagingReq, opts ...grpc.CallOption) (*rule.PagingRsp, error) {
	out := new(rule.PagingRsp)
	err := c.cc.Invoke(ctx, Rule_Paging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) Update(ctx context.Context, in *rule.UpdateReq, opts ...grpc.CallOption) (*rule.UpdateRsp, error) {
	out := new(rule.UpdateRsp)
	err := c.cc.Invoke(ctx, Rule_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) Delete(ctx context.Context, in *rule.DeleteReq, opts ...grpc.CallOption) (*rule.DeleteRsp, error) {
	out := new(rule.DeleteRsp)
	err := c.cc.Invoke(ctx, Rule_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleServer is the server API for Rule service.
// All implementations must embed UnimplementedRuleServer
// for forward compatibility
type RuleServer interface {
	// 创建
	Add(context.Context, *rule.AddReq) (*rule.AddRsp, error)
	// 获取
	Get(context.Context, *rule.GetReq) (*rule.GetRsp, error)
	// 分页
	Paging(context.Context, *rule.PagingReq) (*rule.PagingRsp, error)
	// 修改
	Update(context.Context, *rule.UpdateReq) (*rule.UpdateRsp, error)
	// 删除
	Delete(context.Context, *rule.DeleteReq) (*rule.DeleteRsp, error)
	mustEmbedUnimplementedRuleServer()
}

// UnimplementedRuleServer must be embedded to have forward compatible implementations.
type UnimplementedRuleServer struct {
}

func (UnimplementedRuleServer) Add(context.Context, *rule.AddReq) (*rule.AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedRuleServer) Get(context.Context, *rule.GetReq) (*rule.GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRuleServer) Paging(context.Context, *rule.PagingReq) (*rule.PagingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paging not implemented")
}
func (UnimplementedRuleServer) Update(context.Context, *rule.UpdateReq) (*rule.UpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRuleServer) Delete(context.Context, *rule.DeleteReq) (*rule.DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRuleServer) mustEmbedUnimplementedRuleServer() {}

// UnsafeRuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleServer will
// result in compilation errors.
type UnsafeRuleServer interface {
	mustEmbedUnimplementedRuleServer()
}

func RegisterRuleServer(s grpc.ServiceRegistrar, srv RuleServer) {
	s.RegisterService(&Rule_ServiceDesc, srv)
}

func _Rule_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rule.AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).Add(ctx, req.(*rule.AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rule.GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).Get(ctx, req.(*rule.GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_Paging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rule.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).Paging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_Paging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).Paging(ctx, req.(*rule.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rule.UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).Update(ctx, req.(*rule.UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rule.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).Delete(ctx, req.(*rule.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Rule_ServiceDesc is the grpc.ServiceDesc for Rule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tech.storezhang.dnsabre.message.Rule",
	HandlerType: (*RuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Rule_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Rule_Get_Handler,
		},
		{
			MethodName: "Paging",
			Handler:    _Rule_Paging_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Rule_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Rule_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tech/storezhang/dnsabre/message/rule.proto",
}
