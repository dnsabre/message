// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: tech/storezhang/dnsabre/message/upstream.proto

package message

import (
	context "context"
	upstream "github.com/dnsabre/core/upstream"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Upstream_Add_FullMethodName    = "/tech.storezhang.dnsabre.message.Upstream/Add"
	Upstream_Get_FullMethodName    = "/tech.storezhang.dnsabre.message.Upstream/Get"
	Upstream_Paging_FullMethodName = "/tech.storezhang.dnsabre.message.Upstream/Paging"
	Upstream_Update_FullMethodName = "/tech.storezhang.dnsabre.message.Upstream/Update"
	Upstream_Delete_FullMethodName = "/tech.storezhang.dnsabre.message.Upstream/Delete"
)

// UpstreamClient is the client API for Upstream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpstreamClient interface {
	// 创建
	Add(ctx context.Context, in *upstream.AddReq, opts ...grpc.CallOption) (*upstream.AddRsp, error)
	// 获取
	Get(ctx context.Context, in *upstream.GetReq, opts ...grpc.CallOption) (*upstream.GetRsp, error)
	// 分页
	Paging(ctx context.Context, in *upstream.PagingReq, opts ...grpc.CallOption) (*upstream.PagingRsp, error)
	// 修改
	Update(ctx context.Context, in *upstream.UpdateReq, opts ...grpc.CallOption) (*upstream.UpdateRsp, error)
	// 删除
	Delete(ctx context.Context, in *upstream.DeleteReq, opts ...grpc.CallOption) (*upstream.DeleteRsp, error)
}

type upstreamClient struct {
	cc grpc.ClientConnInterface
}

func NewUpstreamClient(cc grpc.ClientConnInterface) UpstreamClient {
	return &upstreamClient{cc}
}

func (c *upstreamClient) Add(ctx context.Context, in *upstream.AddReq, opts ...grpc.CallOption) (*upstream.AddRsp, error) {
	out := new(upstream.AddRsp)
	err := c.cc.Invoke(ctx, Upstream_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamClient) Get(ctx context.Context, in *upstream.GetReq, opts ...grpc.CallOption) (*upstream.GetRsp, error) {
	out := new(upstream.GetRsp)
	err := c.cc.Invoke(ctx, Upstream_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamClient) Paging(ctx context.Context, in *upstream.PagingReq, opts ...grpc.CallOption) (*upstream.PagingRsp, error) {
	out := new(upstream.PagingRsp)
	err := c.cc.Invoke(ctx, Upstream_Paging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamClient) Update(ctx context.Context, in *upstream.UpdateReq, opts ...grpc.CallOption) (*upstream.UpdateRsp, error) {
	out := new(upstream.UpdateRsp)
	err := c.cc.Invoke(ctx, Upstream_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamClient) Delete(ctx context.Context, in *upstream.DeleteReq, opts ...grpc.CallOption) (*upstream.DeleteRsp, error) {
	out := new(upstream.DeleteRsp)
	err := c.cc.Invoke(ctx, Upstream_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpstreamServer is the server API for Upstream service.
// All implementations must embed UnimplementedUpstreamServer
// for forward compatibility
type UpstreamServer interface {
	// 创建
	Add(context.Context, *upstream.AddReq) (*upstream.AddRsp, error)
	// 获取
	Get(context.Context, *upstream.GetReq) (*upstream.GetRsp, error)
	// 分页
	Paging(context.Context, *upstream.PagingReq) (*upstream.PagingRsp, error)
	// 修改
	Update(context.Context, *upstream.UpdateReq) (*upstream.UpdateRsp, error)
	// 删除
	Delete(context.Context, *upstream.DeleteReq) (*upstream.DeleteRsp, error)
	mustEmbedUnimplementedUpstreamServer()
}

// UnimplementedUpstreamServer must be embedded to have forward compatible implementations.
type UnimplementedUpstreamServer struct {
}

func (UnimplementedUpstreamServer) Add(context.Context, *upstream.AddReq) (*upstream.AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedUpstreamServer) Get(context.Context, *upstream.GetReq) (*upstream.GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUpstreamServer) Paging(context.Context, *upstream.PagingReq) (*upstream.PagingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paging not implemented")
}
func (UnimplementedUpstreamServer) Update(context.Context, *upstream.UpdateReq) (*upstream.UpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUpstreamServer) Delete(context.Context, *upstream.DeleteReq) (*upstream.DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUpstreamServer) mustEmbedUnimplementedUpstreamServer() {}

// UnsafeUpstreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpstreamServer will
// result in compilation errors.
type UnsafeUpstreamServer interface {
	mustEmbedUnimplementedUpstreamServer()
}

func RegisterUpstreamServer(s grpc.ServiceRegistrar, srv UpstreamServer) {
	s.RegisterService(&Upstream_ServiceDesc, srv)
}

func _Upstream_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upstream.AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Upstream_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).Add(ctx, req.(*upstream.AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upstream_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upstream.GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Upstream_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).Get(ctx, req.(*upstream.GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upstream_Paging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upstream.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).Paging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Upstream_Paging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).Paging(ctx, req.(*upstream.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upstream_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upstream.UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Upstream_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).Update(ctx, req.(*upstream.UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upstream_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upstream.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Upstream_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).Delete(ctx, req.(*upstream.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Upstream_ServiceDesc is the grpc.ServiceDesc for Upstream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Upstream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tech.storezhang.dnsabre.message.Upstream",
	HandlerType: (*UpstreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Upstream_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Upstream_Get_Handler,
		},
		{
			MethodName: "Paging",
			Handler:    _Upstream_Paging_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Upstream_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Upstream_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tech/storezhang/dnsabre/message/upstream.proto",
}
