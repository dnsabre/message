// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: tech/storezhang/dnsabre/message/resolve.proto

package message

import (
	context "context"
	resolve "github.com/dnsabre/core/resolve"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Resolve_Add_FullMethodName    = "/tech.storezhang.dnsabre.message.Resolve/Add"
	Resolve_Paging_FullMethodName = "/tech.storezhang.dnsabre.message.Resolve/Paging"
	Resolve_Update_FullMethodName = "/tech.storezhang.dnsabre.message.Resolve/Update"
	Resolve_Delete_FullMethodName = "/tech.storezhang.dnsabre.message.Resolve/Delete"
)

// ResolveClient is the client API for Resolve service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResolveClient interface {
	// 创建
	Add(ctx context.Context, in *resolve.AddReq, opts ...grpc.CallOption) (*resolve.AddRsp, error)
	// 分页
	Paging(ctx context.Context, in *resolve.PagingReq, opts ...grpc.CallOption) (*resolve.PagingRsp, error)
	// 修改
	Update(ctx context.Context, in *resolve.UpdateReq, opts ...grpc.CallOption) (*resolve.UpdateRsp, error)
	// 删除
	Delete(ctx context.Context, in *resolve.DeleteReq, opts ...grpc.CallOption) (*resolve.DeleteRsp, error)
}

type resolveClient struct {
	cc grpc.ClientConnInterface
}

func NewResolveClient(cc grpc.ClientConnInterface) ResolveClient {
	return &resolveClient{cc}
}

func (c *resolveClient) Add(ctx context.Context, in *resolve.AddReq, opts ...grpc.CallOption) (*resolve.AddRsp, error) {
	out := new(resolve.AddRsp)
	err := c.cc.Invoke(ctx, Resolve_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resolveClient) Paging(ctx context.Context, in *resolve.PagingReq, opts ...grpc.CallOption) (*resolve.PagingRsp, error) {
	out := new(resolve.PagingRsp)
	err := c.cc.Invoke(ctx, Resolve_Paging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resolveClient) Update(ctx context.Context, in *resolve.UpdateReq, opts ...grpc.CallOption) (*resolve.UpdateRsp, error) {
	out := new(resolve.UpdateRsp)
	err := c.cc.Invoke(ctx, Resolve_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resolveClient) Delete(ctx context.Context, in *resolve.DeleteReq, opts ...grpc.CallOption) (*resolve.DeleteRsp, error) {
	out := new(resolve.DeleteRsp)
	err := c.cc.Invoke(ctx, Resolve_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResolveServer is the server API for Resolve service.
// All implementations must embed UnimplementedResolveServer
// for forward compatibility
type ResolveServer interface {
	// 创建
	Add(context.Context, *resolve.AddReq) (*resolve.AddRsp, error)
	// 分页
	Paging(context.Context, *resolve.PagingReq) (*resolve.PagingRsp, error)
	// 修改
	Update(context.Context, *resolve.UpdateReq) (*resolve.UpdateRsp, error)
	// 删除
	Delete(context.Context, *resolve.DeleteReq) (*resolve.DeleteRsp, error)
	mustEmbedUnimplementedResolveServer()
}

// UnimplementedResolveServer must be embedded to have forward compatible implementations.
type UnimplementedResolveServer struct {
}

func (UnimplementedResolveServer) Add(context.Context, *resolve.AddReq) (*resolve.AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedResolveServer) Paging(context.Context, *resolve.PagingReq) (*resolve.PagingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paging not implemented")
}
func (UnimplementedResolveServer) Update(context.Context, *resolve.UpdateReq) (*resolve.UpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedResolveServer) Delete(context.Context, *resolve.DeleteReq) (*resolve.DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedResolveServer) mustEmbedUnimplementedResolveServer() {}

// UnsafeResolveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResolveServer will
// result in compilation errors.
type UnsafeResolveServer interface {
	mustEmbedUnimplementedResolveServer()
}

func RegisterResolveServer(s grpc.ServiceRegistrar, srv ResolveServer) {
	s.RegisterService(&Resolve_ServiceDesc, srv)
}

func _Resolve_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resolve.AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResolveServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resolve_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResolveServer).Add(ctx, req.(*resolve.AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resolve_Paging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resolve.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResolveServer).Paging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resolve_Paging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResolveServer).Paging(ctx, req.(*resolve.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resolve_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resolve.UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResolveServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resolve_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResolveServer).Update(ctx, req.(*resolve.UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resolve_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resolve.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResolveServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resolve_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResolveServer).Delete(ctx, req.(*resolve.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Resolve_ServiceDesc is the grpc.ServiceDesc for Resolve service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Resolve_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tech.storezhang.dnsabre.message.Resolve",
	HandlerType: (*ResolveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Resolve_Add_Handler,
		},
		{
			MethodName: "Paging",
			Handler:    _Resolve_Paging_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Resolve_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Resolve_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tech/storezhang/dnsabre/message/resolve.proto",
}
